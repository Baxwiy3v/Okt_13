using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace task
{

    class Program
    {
        static void Main()
        {
            Vehicle[] vehicles = new Vehicle[]
            {
             new Car("Mercedes", "Mercedes-Benz", "White", 3, 210, 4, false),
             new Car("Toyota", "Camry", "Gray", 4, 200, 4, true),
             new Bicycle("Cannondale", "Hybrid Bike", "Black", 3, 90, "Hybrid"),
             new Bicycle("Trek", "Mountain Bike", "White", 2,40 , "Mountain"),
          
            };

            foreach (var vehicle in vehicles)
            {
                Console.WriteLine(vehicle.ToString());
                vehicle.GetInfo();
                vehicle.DefineNatureHarmness();
                Console.WriteLine();
            }
        }
    }

    public abstract class Vehicle
    {
        public string FactoryName { get; set; }
        public string Model { get; set; }
        public string Color { get; set; }
        public double DriveTime { get; set; }
        public double DrivePath { get; set; }
        public DateTime ProductionDate { get; }

        public Vehicle(string factoryName, string model, string color, double driveTime, double drivePath)
        {
            FactoryName = factoryName;
            Model = model;
            Color = color;
            DriveTime = driveTime;
            DrivePath = drivePath;
            ProductionDate = DateTime.Now;
        }

        public abstract void DefineNatureHarmness();

        public double AverageSpeed()
        {
            return DrivePath / DriveTime;
        }

        public virtual void GetInfo()
        {
            Console.WriteLine($"Factory Name: {FactoryName}");
            Console.WriteLine($"Model: {Model}");
            Console.WriteLine($"Color: {Color}");
            Console.WriteLine($"Drive Time: {DriveTime} hours");
            Console.WriteLine($"Drive Path: {DrivePath} km");
            Console.WriteLine($"Production Date: {ProductionDate:yyyy-MM-dd}");
            Console.WriteLine($"Average Speed: {AverageSpeed()} ");
        }

        public override string ToString()
        {
            return $"{FactoryName} {Model}";
        }
    }

  
    public class Car : Vehicle
    {
        public int DoorCount { get; set; }
        public bool IsElectricCar { get; set; }

        public Car(string factoryName, string model, string color, double driveTime, double drivePath, int doorCount, bool isElectricCar)
            : base(factoryName, model, color, driveTime, drivePath)
        {
            DoorCount = doorCount;
            IsElectricCar = isElectricCar;
        }

        public override void DefineNatureHarmness()
        {
            if (IsElectricCar)
                Console.WriteLine("Nature Harmness--Low");
            else
                Console.WriteLine("Nature Harmness--High");
        }
    }

   
    public class Bicycle : Vehicle
    {
        public string Type { get; set; }

        public Bicycle(string factoryName, string model, string color, double driveTime, double drivePath, string type)
            : base(factoryName, model, color, driveTime, drivePath)
        {
            Type = type;
        }

        public override void DefineNatureHarmness()
        {
            Console.WriteLine("Nature Harmness: None");
        }
    }

   
}
